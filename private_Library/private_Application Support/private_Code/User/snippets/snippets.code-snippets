{
  "paste current DateTime": {
    "scope": "plaintext,markdown",
    "prefix": "dtstamp",
    "body": "$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
    "description": "Paste the current DateTime in the format `YYY-MM-DD HH:MM:SS`"
  },
  "paste current Date": {
    "scope": "plaintext,markdown",
    "prefix": "dstamp",
    "body": "$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
    "description": "Paste the current date in YYYY-MM-DD format"
  },
  "generate new UUID": {
    "prefix": [
      "uuid",
      "guid"
    ],
    "body": "${UUID}",
    "description": "Generate a new UUID"
  },
  "add prettier directive": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": "prettier",
    "body": [
      "/**",
      "* @prettier",
      "*/"
    ],
    "description": "Add a @prettier directive"
  },
  "Print to console": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": [
      "log",
      "conlog",
      "cl"
    ],
    "body": "console.log('$1', $1);",
    "description": "Log output to console"
  },
  "Log object to console as JSON": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": [
      "conlogjson",
      "clj"
    ],
    "body": "console.log('$1:\n' + JSON.stringify($1, null, 2));",
    "description": "log a variable to the console as a pretty-printed JSON string"
  },
  "new describe() function": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": [
      "desc-func",
      "df",
      "describe-function"
    ],
    "description": "set up a new 'describe' test function",
    "body": [
      "describe('$1', () => {",
      "    ",
      "})"
    ]
  },
  "new Jest unit test": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": [
      "jest-unit",
      "jest-test"
    ],
    "description": "add a new Jest unit test",
    "body": [
      "it('should ${1:do x} when ${2:y}', () => {",
      "    // arrange",
      "",
      "    // act",
      "",
      "    // assert",
      "    expect.fail('not implemented')",
      "})"
    ]
  },
  "new async Jest unit test": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": [
      "jest-unit-async",
      "jest-test-async"
    ],
    "description": "add a new async Jest unit test",
    "body": [
      "it('should ${1:do x} when ${2:y}', async () => {",
      "    // arrange",
      "    // act",
      "    // assert",
      "    expect.fail('not implemented')",
      "})"
    ]
  },
  "new parameterized Jest unit test": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": [
      "jest-parameterized-unit",
      "jest-parameterized-test"
    ],
    "description": "add a new parameterized Jest unit test",
    "body": [
      "[].forEach((${1:element}) => {",
      "   it('should ${2:do x} when ${3:y}', () => {",
      "       // arrange",
      "",
      "       // act",
      "",
      "       // assert",
      "       expect.fail('not implemented')",
      "   })",
      "})"
    ]
  },
  "new parameterized async Jest unit test": {
    "scope": "javascript,typescript,typescriptreact",
    "prefix": [
      "jest-parameterized-unit-async",
      "jest-parameterized-test-async"
    ],
    "description": "add a new parameterized async Jest unit test",
    "body": [
      "[].forEach((${1:element}) => {",
      "   it('should ${2:do x} when ${3:y}', async () => {",
      "       // arrange",
      "",
      "       // act",
      "",
      "       // assert",
      "       expect.fail('not implemented')",
      "   })",
      "})"
    ]
  }
}