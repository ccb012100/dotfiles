local wezterm = require 'wezterm'
local act = wezterm.action

local config = {}

if wezterm.config_builder then
    config = wezterm.config_builder()
end

config.window_close_confirmation = 'NeverPrompt'
config.initial_cols = 120
config.initial_rows = 60
config.inactive_pane_hsb = {
    saturation = .6,
    brightness = .6,
}
-- TODO: reduce font size on command palette
config.window_frame = { font = wezterm.font('IBM Plex Sans') }
-- place window management buttons (minimize, maximize, close) into the tab bar instead of showing a title bar
config.window_decorations = 'INTEGRATED_BUTTONS|RESIZE'
config.font = wezterm.font {
    family = 'Cascadia Mono NF',
    harfbuzz_features = { 'calt=0', 'clig=0', 'liga=0' }, -- disable ligatures
}
config.font_size = 16.0
config.pane_select_font_size = 36 -- default = 36

--
-- THEMING
--
-- If on Windows, make sure to link/copy files from "~/.config/wezterm/colors/" to "/c/Program Files/Wezterm/colors"
-- see <https://github.com/wez/wezterm/discussions/3426> for a quick theme switcher to quickly demo themes
-- config.color_scheme = 'ayu'
-- config.color_scheme = 'AyuDark (Gogh)'
-- config.color_scheme = 'flexoki-dark'
-- config.color_scheme = 'Oxocarbon Dark (Gogh)'
-- config.color_scheme = 'GJM (terminal.sexy)'
-- config.color_scheme = 'gooey (Gogh)'
config.color_scheme = 'GruvboxDarkHard'
-- config.color_scheme = 'Helios (base16)'
-- config.color_scheme = 'Popping and Locking'
-- config.color_scheme = 'Purpledream (base16)'
-- config.color_scheme = 'Rosé Pine (base16)'

config.window_frame = { font = wezterm.font { family = 'IBM Plex Mono' }, font_size = 13.0, }
config.colors = {
    tab_bar = {
        inactive_tab_edge = 'peru',
    },
    quick_select_label_bg = { Color = '#0000FF' },
    quick_select_label_fg = { Color = '#FFFF00' },
    quick_select_match_bg = { Color = 'peru' },
    quick_select_match_fg = { Color = '#FFFF00' },
}
config.tab_max_width = 72;

--
-- Keybindings
--

config.key_map_preference = 'Physical' -- see: <https://github.com/wez/wezterm/issues/2623>
config.use_dead_keys = false
config.disable_default_key_bindings = true
config.quick_select_alphabet = 'asdfjkl;zxcvm,./weruiopb'

-- Show the name of the active key table in the status area
wezterm.on('update-right-status', function(window, pane)
    local name = window:active_key_table()
    if name then
        name = 'TABLE: ' .. name .. ' '
    end
    window:set_right_status(name or '')
end)

local keycode = {
    none = 'NONE', -- unmap
    alt_opt = 'ALT',
    ctrl = 'CTRL',
    ctrl_shift = 'SHIFT|CTRL',
    enter = 'Enter',
    shift = 'SHIFT',
    space = 'phys:Space',
    super = 'SUPER', -- equivalent to 'CMD' and 'WIN'
    -- leader
    leader = 'LEADER',
    leader_ctrl = 'LEADER|CTRL',
    leader_ctrlshift = 'LEADER|SHIFT|CTRL',
    leader_shift = 'LEADER|SHIFT',
}

-- LEADER key is Ctrl-j
config.leader = { key = 'j', mods = keycode.ctrl }

config.keys = {
    -- This lets us hide the app with Cmd+h on macOS
    { key = 'h',           mods = keycode.super,            action = wezterm.action.HideApplication },
    -- open wezterm config (i.e. this file) in Visual Studio Code with ⌘-,
    {
        key = ',',
        mods = 'SUPER',
        action = wezterm.action.SpawnCommandInNewTab {
            cwd = wezterm.home_dir,
            args = { '/usr/local/bin/code', wezterm.config_file },
        },
    },
    -- Launcher
    {
        key = 'Enter',
        mods = keycode.ctrl,
        action = act.ShowLauncherArgs { flags = 'FUZZY|TABS|LAUNCH_MENU_ITEMS' }
    },
    -- Enter resize_pane mode until we cancel out of it
    {
        key = 'r',
        mods = 'LEADER',
        action = act.ActivateKeyTable { name = 'resize_pane', one_shot = false, },
    },
    -- Command Palette
    { key = keycode.space, mods = keycode.ctrl,             action = act.ActivateCommandPalette },
    { key = keycode.space, mods = keycode.shift,            action = act.ActivateCommandPalette },
    -- Function keys
    { key = 'F1',          mods = keycode.leader_shift,     action = act.ShowDebugOverlay },
    { key = 'F5',          mods = keycode.ctrl,             action = act.ReloadConfiguration },
    { key = 'F11',         mods = keycode.ctrl,             action = act.ToggleFullScreen },
    -- Windows
    { key = keycode.space, mods = keycode.leader,           action = act.SpawnWindow },
    { key = 'n',           mods = keycode.super,            action = act.SpawnWindow },
    -- Tabs
    { key = 't',           mods = keycode.leader,           action = act.SpawnTab 'CurrentPaneDomain' },
    { key = 't',           mods = keycode.super,            action = act.SpawnTab 'CurrentPaneDomain' },
    { key = 'q',           mods = keycode.leader,           action = act.CloseCurrentTab { confirm = true } },
    { key = 'q',           mods = keycode.super,            action = act.CloseCurrentTab { confirm = true } },
    -- Move/Activate Tab
    { key = '0',           mods = keycode.leader,           action = act.MoveTab(0) },
    { key = 'Tab',         mods = keycode.ctrl_shift,       action = act.ActivateTabRelative(-1) }, -- activate previous
    { key = 'Tab',         mods = keycode.ctrl,             action = act.ActivateTabRelative(1) },  -- activate next
    { key = 'b',           mods = keycode.leader,           action = act.ActivateTabRelative(-1) }, -- activate previous
    { key = 'f',           mods = keycode.leader,           action = act.ActivateTabRelative(1) },  -- activate next
    { key = 'Tab',         mods = keycode.leader,           action = act.MoveTabRelative(1) },      -- move forward 1
    { key = 'Tab',         mods = keycode.leader_shift,     action = act.MoveTabRelative(-1) },     -- move backward 1
    -- Panes
    -- :: Split
    { key = keycode.space, mods = keycode.leader,           action = act.SplitVertical },   -- actually a horizontal split
    { key = keycode.enter, mods = keycode.leader,           action = act.SplitHorizontal }, -- actually a vertical split
    -- :: Close pane
    { key = 'w',           mods = keycode.leader,           action = wezterm.action.CloseCurrentPane { confirm = true } },
    { key = 'w',           mods = keycode.super,            action = wezterm.action.CloseCurrentPane { confirm = true } },
    -- :: Select
    { key = 'j',           mods = keycode.leader,           action = act.PaneSelect },
    -- :: Select and move
    { key = 'd',           mods = keycode.leader,           action = act.PaneSelect { mode = 'MoveToNewWindow', } }, -- (d)etach
    { key = 'd',           mods = keycode.leader_shift,     action = act.PaneSelect { mode = 'MoveToNewTab', } },    -- (D)etach
    -- :: activate next Pane with 'Leader, Leader'
    { key = 'j',           mods = keycode.leader_ctrl,      action = act.ActivatePaneDirection 'Next' },
    -- :: activate prev Pane with 'Leader, Shift+Leader'
    { key = 'j',           mods = keycode.leader_ctrlshift, action = act.ActivatePaneDirection 'Prev' },
    -- :: swap the active and selected panes
    { key = 'm',           mods = keycode.leader,           action = act.PaneSelect { mode = 'SwapWithActiveKeepFocus', } },
    -- :: rotate panes
    { key = ',',           mods = keycode.leader,           action = act.RotatePanes 'CounterClockwise', },
    { key = '.',           mods = keycode.leader,           action = act.RotatePanes 'Clockwise' },
    -- :: Adjust pane size
    { key = 'DownArrow',   mods = keycode.ctrl_shift,       action = act.AdjustPaneSize { 'Down', 1 } },
    { key = 'LeftArrow',   mods = keycode.ctrl_shift,       action = act.AdjustPaneSize { 'Left', 1 } },
    { key = 'RightArrow',  mods = keycode.ctrl_shift,       action = act.AdjustPaneSize { 'Right', 1 } },
    { key = 'UpArrow',     mods = keycode.ctrl_shift,       action = act.AdjustPaneSize { 'Up', 1 } },
    -- :: Zoom
    { key = 'z',           mods = keycode.leader,           action = act.TogglePaneZoomState },
    -- Font size
    { key = '-',           mods = keycode.ctrl,             action = act.DecreaseFontSize },
    { key = '+',           mods = keycode.ctrl,             action = act.IncreaseFontSize },
    { key = '=',           mods = keycode.leader,           action = act.ResetFontSize },
    -- Scrollback
    { key = 'PageDown',    mods = keycode.leader,           action = act.ScrollByPage(1) },
    { key = 'PageDown',    mods = keycode.ctrl_shift,       action = act.ScrollByPage(1) },
    { key = 'PageUp',      mods = keycode.leader,           action = act.ScrollByPage(-1) },
    { key = 'PageUp',      mods = keycode.ctrl_shift,       action = act.ScrollByPage(-1) },
    { key = 'u',           mods = keycode.leader,           action = act.ClearScrollback 'ScrollbackOnly' },
    -- Copy/paste/select
    { key = 'c',           mods = keycode.super,            action = act.ActivateCopyMode },
    { key = 'c',           mods = keycode.ctrl_shift,       action = act.CopyTo 'Clipboard' },
    {
        key = "s",
        mods = keycode.ctrl_shift,
        action = act.QuickSelectArgs { patterns = { '\\b\\S*\\b', }, }
    },
    { key = 'v',      mods = keycode.ctrl_shift, action = act.PasteFrom 'Clipboard' },
    { key = 'v',      mods = keycode.super,      action = act.PasteFrom 'Clipboard' },
    { key = 'Copy',   mods = keycode.none,       action = act.CopyTo 'Clipboard' },
    { key = 'Insert', mods = keycode.ctrl,       action = act.CopyTo 'PrimarySelection' },
    { key = 'Insert', mods = keycode.shift,      action = act.PasteFrom 'PrimarySelection' },
    { key = 'Paste',  mods = keycode.none,       action = act.PasteFrom 'Clipboard' },
    -- Search
    { key = 'f',      mods = keycode.ctrl_shift, action = act.Search 'CurrentSelectionOrEmptyString' },
}

for i = 1, 8 do
    --  Super/⌘ + [0-9] to activate that tab
    table.insert(config.keys, {
        key = tostring(i),
        mods = keycode.super,
        action = act.ActivateTab(i - 1),
    })
    --  Alt/Opt + [0-9] to activate that tab
    table.insert(config.keys, {
        key = tostring(i),
        mods = keycode.alt_opt,
        action = act.ActivateTab(i - 1),
    })
    --  Ctrl + Shift + [0-9] to activate that tab
    table.insert(config.keys, {
        key = tostring(i),
        mods = keycode.ctrl_shift,
        action = act.ActivateTab(i - 1),
    })
    -- Leader, number to move tab to that position
    table.insert(config.keys, {
        key = tostring(i),
        mods = keycode.leader,
        action = wezterm.action.MoveTab(i - 1),
    })
end

config.key_tables = {
    -- Resize Pane mode
    resize_pane = {
        { key = 'LeftArrow',  action = act.AdjustPaneSize { 'Left', 1 } },
        { key = 'h',          action = act.AdjustPaneSize { 'Left', 1 } },
        { key = 'f',          action = act.AdjustPaneSize { 'Left', 1 } },
        { key = 'RightArrow', action = act.AdjustPaneSize { 'Right', 1 } },
        { key = 'l',          action = act.AdjustPaneSize { 'Right', 1 } },
        { key = 'b',          action = act.AdjustPaneSize { 'Right', 1 } },
        { key = 'UpArrow',    action = act.AdjustPaneSize { 'Up', 1 } },
        { key = 'k',          action = act.AdjustPaneSize { 'Up', 1 } },
        { key = 'p',          action = act.AdjustPaneSize { 'Up', 1 } },
        { key = 'DownArrow',  action = act.AdjustPaneSize { 'Down', 1 } },
        { key = 'j',          action = act.AdjustPaneSize { 'Down', 1 } },
        { key = 'n',          action = act.AdjustPaneSize { 'Down', 1 } },
        { key = 'Escape',     action = 'PopKeyTable' }, -- Exit mode
    },
    -- Copy mode
    copy_mode = {
        { key = 'Tab',    mods = 'NONE',  action = act.CopyMode 'MoveForwardWord' },
        { key = 'Tab',    mods = 'SHIFT', action = act.CopyMode 'MoveBackwardWord' },
        { key = 'Enter',  mods = 'NONE',  action = act.CopyMode 'MoveToStartOfNextLine' },
        { key = 'Escape', mods = 'NONE',  action = act.CopyMode 'Close' },
        { key = 'Space',  mods = 'NONE',  action = act.CopyMode { SetSelectionMode = 'Cell' } },
        { key = '$',      mods = 'NONE',  action = act.CopyMode 'MoveToEndOfLineContent' },
        { key = '$',      mods = 'SHIFT', action = act.CopyMode 'MoveToEndOfLineContent' },
        { key = ',',      mods = 'NONE',  action = act.CopyMode 'JumpReverse' },
        { key = '0',      mods = 'NONE',  action = act.CopyMode 'MoveToStartOfLine' },
        { key = ';',      mods = 'NONE',  action = act.CopyMode 'JumpAgain' },
        { key = 'F',      mods = 'NONE',  action = act.CopyMode { JumpBackward = { prev_char = false } } },
        { key = 'F',      mods = 'SHIFT', action = act.CopyMode { JumpBackward = { prev_char = false } } },
        { key = 'G',      mods = 'NONE',  action = act.CopyMode 'MoveToScrollbackBottom' },
        { key = 'G',      mods = 'SHIFT', action = act.CopyMode 'MoveToScrollbackBottom' },
        { key = 'H',      mods = 'NONE',  action = act.CopyMode 'MoveToViewportTop' },
        { key = 'H',      mods = 'SHIFT', action = act.CopyMode 'MoveToViewportTop' },
        { key = 'L',      mods = 'NONE',  action = act.CopyMode 'MoveToViewportBottom' },
        { key = 'L',      mods = 'SHIFT', action = act.CopyMode 'MoveToViewportBottom' },
        { key = 'M',      mods = 'NONE',  action = act.CopyMode 'MoveToViewportMiddle' },
        { key = 'M',      mods = 'SHIFT', action = act.CopyMode 'MoveToViewportMiddle' },
        { key = 'O',      mods = 'NONE',  action = act.CopyMode 'MoveToSelectionOtherEndHoriz' },
        { key = 'O',      mods = 'SHIFT', action = act.CopyMode 'MoveToSelectionOtherEndHoriz' },
        { key = 'T',      mods = 'NONE',  action = act.CopyMode { JumpBackward = { prev_char = true } } },
        { key = 'T',      mods = 'SHIFT', action = act.CopyMode { JumpBackward = { prev_char = true } } },
        { key = 'V',      mods = 'NONE',  action = act.CopyMode { SetSelectionMode = 'Line' } },
        { key = 'V',      mods = 'SHIFT', action = act.CopyMode { SetSelectionMode = 'Line' } },
        { key = '^',      mods = 'NONE',  action = act.CopyMode 'MoveToStartOfLineContent' },
        { key = '^',      mods = 'SHIFT', action = act.CopyMode 'MoveToStartOfLineContent' },
        { key = 'b',      mods = 'NONE',  action = act.CopyMode 'MoveBackwardWord' },
        { key = 'b',      mods = 'ALT',   action = act.CopyMode 'MoveBackwardWord' },
        { key = 'b',      mods = 'CTRL',  action = act.CopyMode 'PageUp' },
        { key = 'c',      mods = 'CTRL',  action = act.CopyMode 'Close' },
        { key = 'd',      mods = 'CTRL',  action = act.CopyMode { MoveByPage = (0.5) } },
        { key = 'e',      mods = 'NONE',  action = act.CopyMode 'MoveForwardWordEnd' },
        { key = 'f',      mods = 'NONE',  action = act.CopyMode { JumpForward = { prev_char = false } } },
        { key = 'f',      mods = 'ALT',   action = act.CopyMode 'MoveForwardWord' },
        { key = 'f',      mods = 'CTRL',  action = act.CopyMode 'PageDown' },
        { key = 'g',      mods = 'NONE',  action = act.CopyMode 'MoveToScrollbackTop' },
        { key = 'g',      mods = 'CTRL',  action = act.CopyMode 'Close' },
        { key = 'h',      mods = 'NONE',  action = act.CopyMode 'MoveLeft' },
        { key = 'j',      mods = 'NONE',  action = act.CopyMode 'MoveDown' },
        { key = 'k',      mods = 'NONE',  action = act.CopyMode 'MoveUp' },
        { key = 'l',      mods = 'NONE',  action = act.CopyMode 'MoveRight' },
        { key = 'm',      mods = 'ALT',   action = act.CopyMode 'MoveToStartOfLineContent' },
        { key = 'o',      mods = 'NONE',  action = act.CopyMode 'MoveToSelectionOtherEnd' },
        { key = 'q',      mods = 'NONE',  action = act.CopyMode 'Close' },
        { key = 't',      mods = 'NONE',  action = act.CopyMode { JumpForward = { prev_char = true } } },
        { key = 'u',      mods = 'CTRL',  action = act.CopyMode { MoveByPage = (-0.5) } },
        { key = 'v',      mods = 'NONE',  action = act.CopyMode { SetSelectionMode = 'Cell' } },
        { key = 'v',      mods = 'CTRL',  action = act.CopyMode { SetSelectionMode = 'Block' } },
        { key = 'w',      mods = 'NONE',  action = act.CopyMode 'MoveForwardWord' },
        {
            key = 'y',
            mods = 'NONE',
            action = act.Multiple { { CopyTo = 'ClipboardAndPrimarySelection' }, {
                CopyMode
                = 'Close'
            } }
        },
        { key = 'PageUp',     mods = 'NONE', action = act.CopyMode 'PageUp' },
        { key = 'PageDown',   mods = 'NONE', action = act.CopyMode 'PageDown' },
        { key = 'End',        mods = 'NONE', action = act.CopyMode 'MoveToEndOfLineContent' },
        { key = 'Home',       mods = 'NONE', action = act.CopyMode 'MoveToStartOfLine' },
        { key = 'LeftArrow',  mods = 'NONE', action = act.CopyMode 'MoveLeft' },
        { key = 'LeftArrow',  mods = 'ALT',  action = act.CopyMode 'MoveBackwardWord' },
        { key = 'RightArrow', mods = 'NONE', action = act.CopyMode 'MoveRight' },
        { key = 'RightArrow', mods = 'ALT',  action = act.CopyMode 'MoveForwardWord' },
        { key = 'UpArrow',    mods = 'NONE', action = act.CopyMode 'MoveUp' },
        { key = 'DownArrow',  mods = 'NONE', action = act.CopyMode 'MoveDown' },
    },
    -- Search mode
    search_mode = {
        { key = 'Enter',     mods = 'NONE', action = act.CopyMode 'PriorMatch' },
        { key = 'Escape',    mods = 'NONE', action = act.CopyMode 'Close' },
        { key = 'n',         mods = 'CTRL', action = act.CopyMode 'NextMatch' },
        { key = 'p',         mods = 'CTRL', action = act.CopyMode 'PriorMatch' },
        { key = 'r',         mods = 'CTRL', action = act.CopyMode 'CycleMatchType' },
        { key = 'u',         mods = 'CTRL', action = act.CopyMode 'ClearPattern' },
        { key = 'PageUp',    mods = 'NONE', action = act.CopyMode 'PriorMatchPage' },
        { key = 'PageDown',  mods = 'NONE', action = act.CopyMode 'NextMatchPage' },
        { key = 'UpArrow',   mods = 'NONE', action = act.CopyMode 'PriorMatch' },
        { key = 'DownArrow', mods = 'NONE', action = act.CopyMode 'NextMatch' },
    },

}

-- This function returns the suggested title for a tab.
-- It prefers the title that was set via `tab:set_title()` or `wezterm cli set-tab-title`,
-- but falls back to the title of the active pane in that tab.
local function tab_title(tab_info)
    local title = tab_info.tab_title
    -- if the tab title is explicitly set, take that
    if title and #title > 0 then
        return title
    end
    -- Otherwise, use the title from the active pane
    -- in that tab
    return tab_info.tab_index + 1 .. ': ' .. tab_info.active_pane.title
end

-- format tab title to show an indicator when the acive pane is zoomed in
wezterm.on(
    'format-tab-title',
    function(tab, tabs, panes, config, hover, max_width)
        local title = tab_title(tab)

        if tab.is_active then
            if tab.active_pane.is_zoomed then
                return {
                    { Foreground = { Color = '#ffbf00' } }, -- amber
                    { Text = '🧿 ' .. title .. ' [Z]' },
                }
            else
                return {
                    { Text = ' ' .. title .. ' ' },
                }
            end
        end

        return title
    end
)
{{- if .isWSL2 }}
{{- template "wezterm_win" -}}
{{- end}}

return config
